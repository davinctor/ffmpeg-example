apply plugin: 'com.android.model.application'

def ffmpeg_root = '../ffmpeg';
def supportedAbis = ['armeabi','armeabi-v7a'];

model {
    repositories {
        libs(PrebuiltLibraries) {
////////////////////////////////////////////////////////////////////////////////////////////////////
//         repositories.libs closure script for generated by ffmpeg_build_script build dir structure
////////////////////////////////////////////////////////////////////////////////////////////////////
//            libavcodec {
//                binaries.withType(SharedLibraryBinary) {
//                    headers.srcDir "${ffmpeg}/${targetPlatform.getName()}/include"
//                    sharedLibraryFile = file("${ffmpeg}/${targetPlatform.getName()}/lib/libavcodec.so")
//                }
//            }
//            libavfilter {
//                binaries.withType(SharedLibraryBinary) {
//                    println("${ffmpeg}/${targetPlatform.getName()}/include")
//                    headers.srcDir "${ffmpeg}/${targetPlatform.getName()}/include"
//                    sharedLibraryFile = file("${ffmpeg}/${targetPlatform.getName()}/lib/libavfilter.so")
//                }
//            }
//            libavformat {
//                binaries.withType(SharedLibraryBinary) {
//                    headers.srcDir "${ffmpeg}/${targetPlatform.getName()}/include"
//                    sharedLibraryFile = file("${ffmpeg}/${targetPlatform.getName()}/lib/libavformat.so")
//                }
//            }
//            libavutil {
//                binaries.withType(SharedLibraryBinary) {
//                    headers.srcDir "${ffmpeg}/${targetPlatform.getName()}/include"
//                    sharedLibraryFile = file("${ffmpeg}/${targetPlatform.getName()}/lib/libavutil.so")
//                }
//            }
//            libswresample {
//                binaries.withType(SharedLibraryBinary) {
//                    headers.srcDir "${ffmpeg}/${targetPlatform.getName()}/include"
//                    sharedLibraryFile = file("${ffmpeg}/${targetPlatform.getName()}/lib/libswresample.so")
//                }
//            }
//            libswscale {
//                binaries.withType(SharedLibraryBinary) {
//                    headers.srcDir "${ffmpeg}/${targetPlatform.getName()}/include"
//                    sharedLibraryFile = file("${ffmpeg}/${targetPlatform.getName()}/lib/libswscale.so")
//                }
//            }
////////////////////////////////////////////////////////////////////////////////////////////////////

            ////////////////////////////////////////////////////////////////////////////////////////
            //                 repositories.libs closure script for right dir structure
            ////////////////////////////////////////////////////////////////////////////////////////
            libavcodec {
                headers.srcDir "${ffmpeg_root}/libavcodec/include"
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("${ffmpeg_root}/libavcodec/lib/${targetPlatform.getName()}/libavcodec.so")
                }
            }
            libavfilter {
                headers.srcDir "${ffmpeg_root}/libavfilter/include"
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("${ffmpeg_root}/libavfilter/lib/${targetPlatform.getName()}/libavfilter.so")
                }
            }
            libavformat {
                headers.srcDir "${ffmpeg_root}/libavformat/include"
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("${ffmpeg_root}/libavformat/lib/${targetPlatform.getName()}/libavformat.so")
                }
            }
            libavutil {
                headers.srcDir "${ffmpeg_root}/libavutil/include"
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("${ffmpeg_root}/libavutil/lib/${targetPlatform.getName()}/libavutil.so")
                }
            }
            libswresample {
                headers.srcDir "${ffmpeg_root}/libswresample/include"
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("${ffmpeg_root}/libswresample/lib/${targetPlatform.getName()}/libswresample.so")
                }
            }
            libswscale {
                headers.srcDir "${ffmpeg_root}/libswscale/include"
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("${ffmpeg_root}/libswscale/lib/${targetPlatform.getName()}/libswscale.so")
                }
            }
        }
    }

    android {
        compileSdkVersion 24
        buildToolsVersion "24.0.0"

        defaultConfig {
            applicationId "tk.davinctor.jni3rdpartylibsample"
            minSdkVersion.apiLevel 9 // minSdkVersion.apiLevel
            targetSdkVersion.apiLevel 24 // targetSdkVersion.apiLevel
            versionCode 1
            versionName "1.0"
        }

        ndk {
            //platformVersion = 21
            moduleName = 'jni_lib'
            toolchain = 'clang'
            stl = 'stlport_static'
            CFlags.addAll([]) // any c flags
            cppFlags.addAll(['-fexceptions','-std=c++11'])
            ldLibs.addAll(['log', 'android', 'jnigraphics', 'OpenSLES'])
            // build a default combined apk including all ABIs.
            abiFilters.addAll(supportedAbis)
        }

        buildTypes {
            release {
                minifyEnabled true
                proguardFiles.add(file('proguard-android.txt'))
            }
        }

        sources {
            //noinspection GroovyAssignabilityCheck
            main {
                jni {
                    dependencies {
                        library 'libavcodec' linkage 'shared'
                        library 'libavfilter' linkage 'shared'
                        library 'libavformat' linkage 'shared'
                        library 'libavutil' linkage 'shared'
                        library 'libswresample' linkage 'shared'
                        library 'libswscale' linkage 'shared'
                    }
                }
                jniLibs {
                    // for shared lib, lib need to be pushed to the target too
                    // Once libs are copied into app/src/main/jniLibs directory,
                    // Android Studio will pack them into APK's lib/ directory
                    // Here we like to avoid another duplication by pointing
                    // to the files that containing our libs' distribution location
                    // so the same file is used by compiler at host, also packed
                    // into APk to be used at Target (phone/tablet)
                    source {
                        srcDir "${ffmpeg_root}/libavcodec/lib"
                        srcDir "${ffmpeg_root}/libavfilter/lib"
                        srcDir "${ffmpeg_root}/libavformat/lib"
                        srcDir "${ffmpeg_root}/libavutil/lib"
                        srcDir "${ffmpeg_root}/libswresample/lib"
                        srcDir "${ffmpeg_root}/libswscale/lib"
                    }
                }
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:24.1.1'
}
