apply plugin: 'com.android.application'

def ffmpeg_root = '../ffmpeg';

android {
    compileSdkVersion = 24
    buildToolsVersion = '24.0.0'

    defaultConfig {
        applicationId = 'tk.davinctor.jni3rdpartylibsample'
        minSdkVersion 9
        targetSdkVersion 24
        versionCode = 1
        versionName = '1.0'

        externalNativeBuild {
            cmake {
//                targets "target1", "target2"
//                arguments "-DANDROID_TOOLCHAIN=clang"
//                cFlags "-DTEST_C_FLAG1", "-DTEST_C_FLAG2"
//                cppFlags "-DTEST_CPP_FLAG2", "-DTEST_CPP_FLAG2"
//                abiFilters "armeabi-v7a", "armeabi"
                //arguments "-DANDROID_TOOLCHAIN=clang"
                cppFlags "-std=c++11 -frtti -fexceptions"
                abiFilters 'armeabi', 'armeabi-v7a'
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            // let gradle pack the shared library into apk
            jniLibs.srcDirs = ["${ffmpeg_root}/libavcodec/lib",
                               "${ffmpeg_root}/libavfilter/lib",
                               "${ffmpeg_root}/libavformat/lib",
                               "${ffmpeg_root}/libavutil/lib",
                               "${ffmpeg_root}/libswresample/lib",
                               "${ffmpeg_root}/libswscale/lib"]
        }
    }

    externalNativeBuild {
        cmake {
            path 'src/main/cpp/CMakeLists.txt'
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:24.1.1'
    // uncomment out this one to generate lib binaries,
    // and also uncommend out the one in settings.gradle
    // after lib is generated, just comment them out again
//        compile project(':gen-libs')
}